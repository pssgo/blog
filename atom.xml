<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pssgo的博客</title>
  
  <subtitle>pssgo的博客</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://www.pssgo.com/"/>
  <updated>2018-08-01T12:49:54.699Z</updated>
  <id>https://www.pssgo.com/</id>
  
  <author>
    <name>pssgo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang类型判断</title>
    <link href="https://www.pssgo.com/2018/07/23/golang%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>https://www.pssgo.com/2018/07/23/golang类型判断/</id>
    <published>2018-07-23T07:10:52.000Z</published>
    <updated>2018-08-01T12:49:54.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近在学习golang-突发奇想-在golang中有没有-类似于js中的typeof这种方法那"><a href="#最近在学习golang-突发奇想-在golang中有没有-类似于js中的typeof这种方法那" class="headerlink" title="最近在学习golang 突发奇想 在golang中有没有 类似于js中的typeof这种方法那"></a>最近在学习golang 突发奇想 在golang中有没有 类似于js中的<code>typeof</code>这种方法那</h2><h3 id="确实有这个方法-就是不是特别的简单好用-具体来看代码"><a href="#确实有这个方法-就是不是特别的简单好用-具体来看代码" class="headerlink" title="确实有这个方法 就是不是特别的简单好用 具体来看代码"></a>确实有这个方法 就是不是特别的简单好用 具体来看代码</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 省略一堆包声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Verator <span class="keyword">struct</span> &#123;</span><br><span class="line">  x,y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">interface</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a := <span class="string">"hello golang"</span></span><br><span class="line">  <span class="comment">// 第二种写法 返回的第二个参数ok true 代表类型正确</span></span><br><span class="line">  <span class="comment">// 这种写法 可以来判断 自定义的类型 </span></span><br><span class="line">  <span class="comment">// 这种写法的格式为 interface&#123;&#125;(a).(string|bool|int....)</span></span><br><span class="line">  _ ,ok := T(a).(<span class="keyword">string</span>)</span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    <span class="comment">// todo...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种写法 必须要在switch语句里面写  e.(type)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typeof</span><span class="params">(e <span class="keyword">interface</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> e.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>: </span><br><span class="line">      fmt.Println(<span class="string">"int 类型"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      fmt.Println(<span class="string">"其他类型"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以借助 reflect包 来进行类型判断</span></span><br><span class="line"><span class="comment">// 当判断 struct和interface时 需要额外处理下  可能为 package.XXX  []package.XXX</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typeof2</span><span class="params">(e <span class="keyword">interface</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> reflect.TypeOf(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用fmt.Sprintf 包 来判断类型</span></span><br><span class="line"><span class="comment">// %T 是 值的类型的Go语法表示</span></span><br><span class="line"><span class="comment">// 当判断 struct和interface时 需要额外处理下  可能为 package.XXX  []package.XXX</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typeof3</span> <span class="params">(e <span class="keyword">interface</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%T"</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最近在学习golang-突发奇想-在golang中有没有-类似于js中的typeof这种方法那&quot;&gt;&lt;a href=&quot;#最近在学习golang-突发奇想-在golang中有没有-类似于js中的typeof这种方法那&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="golang" scheme="https://www.pssgo.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>css选择器</title>
    <link href="https://www.pssgo.com/2018/07/19/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://www.pssgo.com/2018/07/19/css选择器/</id>
    <published>2018-07-19T04:00:00.000Z</published>
    <updated>2018-07-19T10:02:02.022Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来介绍一下 css 中的选择器</p><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器:"></a>id选择器:</h2><h3 id="id选择器在css中有着比较高的优先级-代表唯一元素-在html中-id-”box”"><a href="#id选择器在css中有着比较高的优先级-代表唯一元素-在html中-id-”box”" class="headerlink" title="id选择器在css中有着比较高的优先级 代表唯一元素 在html中: id=”box”"></a>id选择器在css中有着比较高的优先级 代表唯一元素 在html中: id=”box”</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  // somethings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器:"></a>类选择器:</h2><h3 id="类选择器-可以有很多个-优先级低于-id选择器-在html中-class-”item”"><a href="#类选择器-可以有很多个-优先级低于-id选择器-在html中-class-”item”" class="headerlink" title="类选择器 可以有很多个 优先级低于 id选择器 在html中:  class=”item”"></a>类选择器 可以有很多个 优先级低于 id选择器 在html中:  class=”item”</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  // somethings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器:"></a>元素选择器:</h2><h3 id="元素选择器-标签选择器-是html-xml中的标签-优先级低于类选择器"><a href="#元素选择器-标签选择器-是html-xml中的标签-优先级低于类选择器" class="headerlink" title="元素选择器(标签选择器) 是html/xml中的标签 优先级低于类选择器"></a>元素选择器(标签选择器) 是html/xml中的标签 优先级低于类选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">article</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><h3 id="属性选择器为-为拥有指定属性的html标签来添加样式"><a href="#属性选择器为-为拥有指定属性的html标签来添加样式" class="headerlink" title="属性选择器为 为拥有指定属性的html标签来添加样式"></a>属性选择器为 为拥有指定属性的html标签来添加样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span> &#123;&#125;</span><br><span class="line"><span class="selector-attr">[placeholder]</span> &#123;&#125;</span><br><span class="line"><span class="selector-attr">[href]</span> &#123;&#125;</span><br><span class="line"><span class="selector-attr">[src]</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><h3 id="通配符选择器-为-为所有的html标签添加样式"><a href="#通配符选择器-为-为所有的html标签添加样式" class="headerlink" title="通配符选择器 为 * 为所有的html标签添加样式"></a>通配符选择器 为 * 为所有的html标签添加样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="伪类选择器是css2-0规范中的-用-一个冒号隔开"><a href="#伪类选择器是css2-0规范中的-用-一个冒号隔开" class="headerlink" title="伪类选择器是css2.0规范中的 用 : 一个冒号隔开"></a>伪类选择器是css2.0规范中的 用 : 一个冒号隔开</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:active</span> &#123;&#125; <span class="comment">/* 激活元素 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;&#125; <span class="comment">/* 鼠标移入 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:visited</span> &#123;&#125; <span class="comment">/* 已访问链接的样式 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:focus</span> &#123;&#125; <span class="comment">/* 获取焦点 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:link</span> &#123;&#125; <span class="comment">/* 未访问链接的样式 */</span></span><br></pre></td></tr></table></figure><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><h3 id="这货是css3-0规范-和-伪类选择不同-用双引号隔开"><a href="#这货是css3-0规范-和-伪类选择不同-用双引号隔开" class="headerlink" title="这货是css3.0规范 和 伪类选择不同 ::用双引号隔开"></a>这货是css3.0规范 和 伪类选择不同 <code>::</code>用双引号隔开</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::last-child</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::first</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::nth-child(even)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h2><h3 id="相邻兄弟选择器-适用于其他选择器-一个元素跟在另一个元素的后面"><a href="#相邻兄弟选择器-适用于其他选择器-一个元素跟在另一个元素的后面" class="headerlink" title="相邻兄弟选择器  适用于其他选择器 一个元素跟在另一个元素的后面"></a>相邻兄弟选择器  适用于其他选择器 一个元素跟在另一个元素的后面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1-1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2-1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2-2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2-3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red; <span class="comment">/* div test 的颜色会变为红色 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> + <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; <span class="comment">/* ul下的li除了第一个其他的字体都会加粗 找不到相邻的元素就不会生效 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><h3 id="格式为-selector1-selector2-元素必须要有相同的父元素，但是selector2不必紧紧跟再selector1的后面"><a href="#格式为-selector1-selector2-元素必须要有相同的父元素，但是selector2不必紧紧跟再selector1的后面" class="headerlink" title="格式为 selector1 ~ selector2 元素必须要有相同的父元素，但是selector2不必紧紧跟再selector1的后面"></a>格式为 <code>selector1 ~ selector2</code> 元素必须要有相同的父元素，但是selector2不必紧紧跟再selector1的后面</h3><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><h3 id="格式为-selector1-gt-selector2"><a href="#格式为-selector1-gt-selector2" class="headerlink" title="格式为: selector1 &gt; selector2"></a>格式为: <code>selector1 &gt; selector2</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h2><h3 id="格式为-selector1-selector2"><a href="#格式为-selector1-selector2" class="headerlink" title="格式为: selector1 + , selector2"></a>格式为: <code>selector1 + , selector2</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>,<span class="selector-class">.item</span>,<span class="selector-tag">p</span> &#123;&#125; <span class="comment">/* 用来同时给一组选择器设置样式 */</span></span><br></pre></td></tr></table></figure><p>通常我们去设置css的时候 可能会用选择器来覆盖其他选择器的样式，选择器有一个权重的概念，我简单的做了一个区分</p><table><thead><tr><th style="text-align:center">selector</th><th style="text-align:center">example</th><th style="text-align:center">weight</th></tr></thead><tbody><tr><td style="text-align:center">通配符选择器</td><td style="text-align:center">*</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">属性选择器</td><td style="text-align:center">[title]</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">标签选择器</td><td style="text-align:center">div</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">类选择器</td><td style="text-align:center">.item</td><td style="text-align:center">1000</td></tr><tr><td style="text-align:center">id选择器</td><td style="text-align:center">#box</td><td style="text-align:center">10000</td></tr><tr><td style="text-align:center">伪类选择器</td><td style="text-align:center">div:hover</td><td style="text-align:center">冒号前的选择器的和 + 10</td></tr><tr><td style="text-align:center">伪元素选择器</td><td style="text-align:center">div::nth-child(even)</td><td style="text-align:center">冒号前的选择器的和 + 10</td></tr><tr><td style="text-align:center">相邻兄弟选择器</td><td style="text-align:center">div + div</td><td style="text-align:center">选择器权重的和</td></tr><tr><td style="text-align:center">后代选择器</td><td style="text-align:center">div ~ p</td><td style="text-align:center">选择器权重的和</td></tr></tbody></table><blockquote><blockquote><p>注意！这里不包括css3中的查询和动画的规则</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章来介绍一下 css 中的选择器&lt;/p&gt;
&lt;h2 id=&quot;id选择器&quot;&gt;&lt;a href=&quot;#id选择器&quot; class=&quot;headerlink&quot; title=&quot;id选择器:&quot;&gt;&lt;/a&gt;id选择器:&lt;/h2&gt;&lt;h3 id=&quot;id选择器在css中有着比较高的优先级-代表唯一
      
    
    </summary>
    
    
      <category term="css" scheme="https://www.pssgo.com/tags/css/"/>
    
  </entry>
  
</feed>
